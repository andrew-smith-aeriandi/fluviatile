using System.Xml;

namespace SvgGenerator;

public class SvgWriter
{
    private readonly XmlWriter _xmlWriter;

    public SvgWriter(XmlWriter xmlWriter)
    {
        _xmlWriter = xmlWriter;
    }

    public void WritePolygon(
        IEnumerable<(float x, float y)> vertices,
        string fillColour,
        string edgeColour,
        int edgeWidth)
    {
        //<polygon points="200,10 250,190 160,210" style="fill:lime;stroke:purple;stroke-width:1" />
        _xmlWriter.WriteStartElement();


    }

    public void Write()
    {
        /*
        var scale = 80.0f;
        var translate = (x: 6.0f, y: 2.0f);
        var xfactor = 0.5f;
        var yfactor = 0.5f * (float)Math.Sqrt(3);

        var textBrush = new SolidBrush(Color.White);
        var font = new Font(DefaultFont, FontStyle.Bold);

        (float x, float y) Transform((float x, float y) point) =>
            (scale * (translate.x + point.x - xfactor * point.y), scale * (translate.y + point.y * yfactor));

        //var (xt, yt) = Transform((-3.3f, -0.6f));
        //gx.DrawString(_grid.DisplayText(), DefaultFont, textBrush, xt, yt);

        var pen = new Pen(Color.DarkSlateGray, 2);  // draw the line 
        var marginPen = new Pen(Color.White, 2);
        var brush = new SolidBrush(Color.Gray);

        foreach (var item in _grid.GetMargins())
        {
            gx.FillPolygon(brush, item
                .Select(p => Transform(p))
                .Select(p => new PointF(p.x, p.y))
                .ToArray());
        }

        foreach (var (from, to) in _grid.MarginLines())
        {
            var (x1, y1) = Transform(from);
            var (x2, y2) = Transform(to);
            gx.DrawLine(marginPen, x1, y1, x2, y2);
        }

        foreach (var (from, to) in _grid.GridLines())
        {
            var (x1, y1) = Transform(from);
            var (x2, y2) = Transform(to);
            gx.DrawLine(pen, x1, y1, x2, y2);
        }

        foreach (var (x, y, count) in _grid.NodeCounts())
        {
            var text = count.ToString();
            var textSize = TextRenderer.MeasureText(text, font);

            var (xp1, yp1) = Transform((x, y));
            gx.DrawString(count.ToString(), font, textBrush, xp1 - 0.5f * textSize.Width, yp1 - 0.5f * textSize.Height);
        }

        _dirty = false;
        */
    }
}
